%Machine Learning 
%Ben Larson
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Benjamin/Documents/MACHINE_LEARNING/hw2/a1a.train
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/02/12 10:30:52

%% Initialize variables.
clear; clc; 
filename = '/Users/Benjamin/Documents/MACHINE_LEARNING/hw2/a1a.train';
delimiter = ' ';

%% Format string for each line of text:
formatSpec = '%f%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Create output variable
dataArray(1) = cellfun(@(x) num2cell(x), dataArray(1), 'UniformOutput', false);
a1a = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Benjamin/Documents/MACHINE_LEARNING/hw2/a1a.test
%

%% Initialize variables.
filename = '/Users/Benjamin/Documents/MACHINE_LEARNING/hw2/a1a.test';
delimiter = ' ';

%% Format string for each line of text:
formatSpec = '%f%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Create output variable
dataArray(1) = cellfun(@(x) num2cell(x), dataArray(1), 'UniformOutput', false);
a1a1 = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Perceprtron main () uses 3 functions perceptronF, perceptronMargin, perceptronAgg
%The Perceptron Algorithm
%use sscanf(string, 'format %i') for finding the features 

%Sanity Check:
% x = [1,0,0,0;
%     1,1,0,0;
%     1,0,1,1;
%     0,1,0,0;
%     0,1,1,0;
%     1,1,1,0;
%     0,1,1,1];
% y = [0,0,1,0,0,0,1]; 
% 
% w = randn(4,1);
% % w = zeros(4,1)+0.1; 
% w = w'; 
% b = -1;
% r = 0.1;
% 
% [p2, misTwo] = perceptronF(x, y, w, r, b); 

% Get the data out and setup matrices
featureMax = 0; 
for row = 1 : size(a1a,1) 
  for col = 2: size(a1a,2) %start at 2,3,4,5 ... n First row is tvalue
    first = sscanf(a1a{row,col},'%i');
    if (featureMax < first)
      featureMax = first; 
    end
    x(row,first) = 1; 
  end
end
x = horzcat(x, zeros(1605,4));
features = zeros(1, 123); %this is the size of features

featureMaxTest = 0; 
for row = 1 : size(a1a1,1) 
  for col = 2: size(a1a1,2) %start at 2,3,4,5 ... n First row is tvalue
    first = sscanf(a1a1{row,col},'%i');
    if (featureMaxTest < first)
      featureMaxTest = first; 
    end
    xtest(row,first) = 1; 
  end
end
featuresTest = zeros(1, 123); %this is the size of features
y = [a1a{:,1}]';

%% Run on Train Data 
w = randn(123,1);
w = w'; 
b = 4;
r = 0.01;
e = 5;
%SHUFFLE!!! 
xshuff = x(randperm(size(x,1)),:);

[weights, misAdultVan] = perceptronF(x, y, w, r, b,e);

u = 100; 
[weightsMargin, misAdultMarg] = perceptronMargin(x,y,w,r,b,u,e); 

[weightsAgg, misAdultAgg] = perceptronAgg(x,y,w,b,u,e); 

%test for accuracy, manually changed each weight for each test 
accurate = 0; %accurateNot = 0; 
accurate2 = 0; %accurateNot2 = 0; 
accurate3 = 0; %accurateNot3 = 0; 
for i = 1 : length(x)
  if (dot(x(i,:),weights)+b > 0  && y(i) > 0)
    accurate = accurate + 1; 
  end 
  if (dot(x(i,:),weightsMargin)+b > 0  && y(i) > 0)
    accurate2 = accurate2 + 1; 
  end 
  if (dot(x(i,:),weightsAgg)+b > 0  && y(i) > 0)
    accurate3 = accurate3 + 1; 
  end 
end
%% Test Data
%run algorithms on the train data. 

ytest = [a1a1{:,1}]'; 

%test for accuracy manually changed the weight for each test 
accurateTest = 0;  %accurateNotTest = 0;
accurateTest2 = 0; %accurateNotTest2 = 0; 
accurateTest3 = 0; %accurateNotTest3 = 0; 

for i = 1 : length(xtest)
  if (dot(xtest(i,:),weights)+b > 0  && ytest(i) > 0)
    accurateTest = accurateTest + 1; 
  end 
  if (dot(xtest(i,:),weightsMargin)+b > 0  && ytest(i) > 0)
    accurateTest2 = accurateTest2 + 1; 
  end 
  if (dot(xtest(i,:),weightsAgg)+b > 0  && ytest(i) > 0)
    accurateTest3 = accurateTest3 + 1; 
  end 
end

